#compdef swift
local context state state_descr line
typeset -A opt_args

_swift() {
    declare -a shared_options
    shared_options=(
        '(-C --chdir)'{-C,--chdir}"[Change working directory before any other operation]: :_files"
        "--color[Specify color mode (auto|always|never)]: :{_values "mode" auto always never}"
        '(-v --verbose)'{-v,--verbose}'[Increase verbosity of informational output]'
        "-Xcc[Pass flag through to all C compiler invocations]: : "
        "-Xlinker[Pass flag through to all linker invocations]: : "
        "-Xswiftc[Pass flag through to all Swift compiler invocations]: : "
    )

    _arguments -C \
        '(- :)--help[prints the synopsis and a list of the most commonly used commands]: :->arg' \
        '(-): :->command' \
        '(-)*:: :->arg' && return

    case $state in
        (command)
            local tools
            tools=(
                'build:build sources into binary products'
                'run:build and run an executable product'
                'package:perform operations on Swift packages'
                'test:build and run tests'
            )
            _alternative \
                'tools:common:{_describe "tool" tools }' \
                'compiler: :_swift_compiler' && _ret=0
            ;;
        (arg)
            case ${words[1]} in
                (build)
                    _swift_build
                    ;;
                (run)
                    _swift_run
                    ;;
                (package)
                    _swift_package
                    ;;
                (test)
                    _swift_test
                    ;;
                (*)
                    _swift_compiler
                    ;;
            esac
            ;;
    esac
}

# Generates completions for swift build
#
# In the final compdef file, set the following file header:
#
#     #compdef _swift_build
#     local context state state_descr line
#     typeset -A opt_args
_swift_build() {
    arguments=(
        "-Xcc[Pass flag through to all C compiler invocations]:Pass flag through to all C compiler invocations: "
        "-Xswiftc[Pass flag through to all Swift compiler invocations]:Pass flag through to all Swift compiler invocations: "
        "-Xlinker[Pass flag through to all linker invocations]:Pass flag through to all linker invocations: "
        "-Xcxx[Pass flag through to all C++ compiler invocations]:Pass flag through to all C++ compiler invocations: "
        "(--configuration -c)"{--configuration,-c}"[Build with configuration (debug|release) ]: :{_values '' 'debug[build with DEBUG configuration]' 'release[build with RELEASE configuration]'}"
        "--build-path[Specify build/cache directory ]:Specify build/cache directory :_files"
        "(--chdir -C)"{--chdir,-C}"[]: :_files"
        "--package-path[Change working directory before any other operation]:Change working directory before any other operation:_files"
        "--enable-prefetching[]"
        "--disable-prefetching[]"
        "--disable-sandbox[Disable using the sandbox when executing subprocesses]"
        "--version[]"
        "--destination[]: :_files"
        "(--verbose -v)"{--verbose,-v}"[Increase verbosity of informational output]"
        "--build-tests[Build the both source and test targets]"
        "--show-bin-path[Print the binary output path]"
    )
    _arguments $arguments && return
}

# Generates completions for swift run
#
# In the final compdef file, set the following file header:
#
#     #compdef _swift_run
#     local context state state_descr line
#     typeset -A opt_args
_swift_run() {
    arguments=(
        ":The executable to run: "
        "-Xcc[Pass flag through to all C compiler invocations]:Pass flag through to all C compiler invocations: "
        "-Xswiftc[Pass flag through to all Swift compiler invocations]:Pass flag through to all Swift compiler invocations: "
        "-Xlinker[Pass flag through to all linker invocations]:Pass flag through to all linker invocations: "
        "-Xcxx[Pass flag through to all C++ compiler invocations]:Pass flag through to all C++ compiler invocations: "
        "(--configuration -c)"{--configuration,-c}"[Build with configuration (debug|release) ]: :{_values '' 'debug[build with DEBUG configuration]' 'release[build with RELEASE configuration]'}"
        "--build-path[Specify build/cache directory ]:Specify build/cache directory :_files"
        "(--chdir -C)"{--chdir,-C}"[]: :_files"
        "--package-path[Change working directory before any other operation]:Change working directory before any other operation:_files"
        "--enable-prefetching[]"
        "--disable-prefetching[]"
        "--disable-sandbox[Disable using the sandbox when executing subprocesses]"
        "--version[]"
        "--destination[]: :_files"
        "(--verbose -v)"{--verbose,-v}"[Increase verbosity of informational output]"
        "--skip-build[Skip building the executable product]"
    )
    _arguments $arguments && return
}

# Generates completions for swift package
#
# In the final compdef file, set the following file header:
#
#     #compdef _swift_package
#     local context state state_descr line
#     typeset -A opt_args
_swift_package() {
    arguments=(
        "-Xcc[Pass flag through to all C compiler invocations]:Pass flag through to all C compiler invocations: "
        "-Xswiftc[Pass flag through to all Swift compiler invocations]:Pass flag through to all Swift compiler invocations: "
        "-Xlinker[Pass flag through to all linker invocations]:Pass flag through to all linker invocations: "
        "-Xcxx[Pass flag through to all C++ compiler invocations]:Pass flag through to all C++ compiler invocations: "
        "(--configuration -c)"{--configuration,-c}"[Build with configuration (debug|release) ]: :{_values '' 'debug[build with DEBUG configuration]' 'release[build with RELEASE configuration]'}"
        "--build-path[Specify build/cache directory ]:Specify build/cache directory :_files"
        "(--chdir -C)"{--chdir,-C}"[]: :_files"
        "--package-path[Change working directory before any other operation]:Change working directory before any other operation:_files"
        "--enable-prefetching[]"
        "--disable-prefetching[]"
        "--disable-sandbox[Disable using the sandbox when executing subprocesses]"
        "--version[]"
        "--destination[]: :_files"
        "(--verbose -v)"{--verbose,-v}"[Increase verbosity of informational output]"
        '(-): :->command'
        '(-)*:: :->arg'
    )
    _arguments $arguments && return
    case $state in
        (command)
            local modes
            modes=(
                'update:Update package dependencies'
                'show-dependencies:Print the resolved dependency graph'
                'resolve:Resolve package dependencies'
                'fetch:'
                'edit:Put a package in editable mode'
                'tools-version:Manipulate tools version of the current package'
                'describe:Describe the current package'
                'clean:Delete build artifacts'
                'generate-completion-script:Generate completion script (Bash or ZSH)'
                'reset:Reset the complete cache/build directory'
                'resolve-tool:'
                'unedit:Remove a package from editable mode'
                'init:Initialize a new package'
                'generate-xcodeproj:Generates an Xcode project'
                'dump-package:Print parsed Package.swift as JSON'
            )
            _describe "mode" modes
            ;;
        (arg)
            case ${words[1]} in
                (update)
                    _swift_package_update
                    ;;
                (show-dependencies)
                    _swift_package_show-dependencies
                    ;;
                (resolve)
                    _swift_package_resolve
                    ;;
                (fetch)
                    _swift_package_fetch
                    ;;
                (edit)
                    _swift_package_edit
                    ;;
                (tools-version)
                    _swift_package_tools-version
                    ;;
                (describe)
                    _swift_package_describe
                    ;;
                (clean)
                    _swift_package_clean
                    ;;
                (generate-completion-script)
                    _swift_package_generate-completion-script
                    ;;
                (reset)
                    _swift_package_reset
                    ;;
                (resolve-tool)
                    _swift_package_resolve-tool
                    ;;
                (unedit)
                    _swift_package_unedit
                    ;;
                (init)
                    _swift_package_init
                    ;;
                (generate-xcodeproj)
                    _swift_package_generate-xcodeproj
                    ;;
                (dump-package)
                    _swift_package_dump-package
                    ;;
            esac
            ;;
    esac
}

_swift_package_update() {
    arguments=(
    )
    _arguments $arguments && return
}

_swift_package_show-dependencies() {
    arguments=(
        "--format[text|dot|json]: :{_values '' 'text[list dependencies using text format]' 'dot[list dependencies using dot format]' 'json[list dependencies using JSON format]'}"
    )
    _arguments $arguments && return
}

_swift_package_resolve() {
    arguments=(
        ":The name of the package to resolve: "
        "--version[The version to resolve at]:The version to resolve at: "
        "--branch[The branch to resolve at]:The branch to resolve at: "
        "--revision[The revision to resolve at]:The revision to resolve at: "
    )
    _arguments $arguments && return
}

_swift_package_fetch() {
    arguments=(
    )
    _arguments $arguments && return
}

_swift_package_edit() {
    arguments=(
        ":The name of the package to edit: "
        "--revision[The revision to edit]:The revision to edit: "
        "--branch[The branch to create]:The branch to create: "
        "--path[Create or use the checkout at this path]:Create or use the checkout at this path:_files"
    )
    _arguments $arguments && return
}

_swift_package_tools-version() {
    arguments=(
        "--set[Set tools version of package to the given value]:Set tools version of package to the given value: "
        "--set-current[Set tools version of package to the current tools version in use]"
    )
    _arguments $arguments && return
}

_swift_package_describe() {
    arguments=(
        "--type[json|text]: :{_values '' 'text[describe using text format]' 'json[describe using JSON format]'}"
    )
    _arguments $arguments && return
}

_swift_package_clean() {
    arguments=(
    )
    _arguments $arguments && return
}

_swift_package_generate-completion-script() {
    arguments=(
        ": :{_values '' 'bash[generate completion script for Bourne-again shell]' 'zsh[generate completion script for Z shell]'}"
    )
    _arguments $arguments && return
}

_swift_package_reset() {
    arguments=(
    )
    _arguments $arguments && return
}

_swift_package_resolve-tool() {
    arguments=(
        "--type[text|json]: :{_values '' 'text[resolve using text format]' 'json[resolve using JSON format]'}"
    )
    _arguments $arguments && return
}

_swift_package_unedit() {
    arguments=(
        ":The name of the package to unedit: "
        "--force[Unedit the package even if it has uncommited and unpushed changes.]"
    )
    _arguments $arguments && return
}

_swift_package_init() {
    arguments=(
        "--type[empty|library|executable|system-module]: :{_values '' 'empty[generates an empty project]' 'library[generates project for a dynamic library]' 'executable[generates a project for a cli executable]' 'system-module[generates a project for a system module]'}"
    )
    _arguments $arguments && return
}

_swift_package_generate-xcodeproj() {
    arguments=(
        "--xcconfig-overrides[Path to xcconfig file]:Path to xcconfig file:_files"
        "--enable-code-coverage[Enable code coverage in the generated project]"
        "--output[Path where the Xcode project should be generated]:Path where the Xcode project should be generated:_files"
    )
    _arguments $arguments && return
}

_swift_package_dump-package() {
    arguments=(
    )
    _arguments $arguments && return
}

# Generates completions for swift test
#
# In the final compdef file, set the following file header:
#
#     #compdef _swift_test
#     local context state state_descr line
#     typeset -A opt_args
_swift_test() {
    arguments=(
        "-Xcc[Pass flag through to all C compiler invocations]:Pass flag through to all C compiler invocations: "
        "-Xswiftc[Pass flag through to all Swift compiler invocations]:Pass flag through to all Swift compiler invocations: "
        "-Xlinker[Pass flag through to all linker invocations]:Pass flag through to all linker invocations: "
        "-Xcxx[Pass flag through to all C++ compiler invocations]:Pass flag through to all C++ compiler invocations: "
        "(--configuration -c)"{--configuration,-c}"[Build with configuration (debug|release) ]: :{_values '' 'debug[build with DEBUG configuration]' 'release[build with RELEASE configuration]'}"
        "--build-path[Specify build/cache directory ]:Specify build/cache directory :_files"
        "(--chdir -C)"{--chdir,-C}"[]: :_files"
        "--package-path[Change working directory before any other operation]:Change working directory before any other operation:_files"
        "--enable-prefetching[]"
        "--disable-prefetching[]"
        "--disable-sandbox[Disable using the sandbox when executing subprocesses]"
        "--version[]"
        "--destination[]: :_files"
        "(--verbose -v)"{--verbose,-v}"[Increase verbosity of informational output]"
        "--skip-build[Skip building the test target]"
        "(--list-tests -l)"{--list-tests,-l}"[Lists test methods in specifier format]"
        "--parallel[Run the tests in parallel.]"
        "(--specifier -s)"{--specifier,-s}"[]: : "
        "--filter[Run test cases matching regular expression, Format: <test-target>.<test-case> or <test-target>.<test-case>/<test>]:Run test cases matching regular expression, Format: <test-target>.<test-case> or <test-target>.<test-case>/<test>: "
    )
    _arguments $arguments && return
}

_swift_compiler() {
    declare -a build_options
    build_options=(
        '-assert-config[Specify the assert_configuration replacement.]: :{_values "" Debug Release Unchecked DisableReplacement}'
        '-D[Marks a conditional compilation flag as true]: : '
        '-framework[Specifies a framework which should be linked against]: : '
        '-F[Add directory to framework search path]: :_files'
        '-gdwarf-types[Emit full DWARF type info.]'
        '-gline-tables-only[Emit minimal debug info for backtraces only]'
        "-gnone[Don't emit debug info]"
        '-g[Emit debug info. This is the preferred setting for debugging with LLDB.]'
        '-help[Display available options]'
        '-index-store-path[Store indexing data to <path>]: :_files'
        '-I[Add directory to the import search path]: :_files'
        '-j[Number of commands to execute in parallel]: : '
        '-L[Add directory to library link search path]: :_files'
        '-l-[Specifies a library which should be linked against]: : '
        '-module-cache-path[Specifies the Clang module cache path]: :_files'
        '-module-link-name[Library to link against when using this module]: : '
        '-module-name[Name of the module to build]: : '
        "-nostdimport[Don't search the standard library import path for modules]"
        '-num-threads[Enable multi-threading and specify number of threads]: : '
        '-Onone[Compile without any optimization]'
        '-Ounchecked[Compile with optimizations and remove runtime safety checks]'
        '-O[Compile with optimizations]'
        '-sdk[Compile against <sdk>]: : '
        '-static-stdlib[Statically link the Swift standard library]'
        '-suppress-warnings[Suppress all warnings]'
        '-target-cpu[Generate code for a particular CPU variant]: : '
        '-target[Generate code for the given target]: : '
        '-use-ld=-[Specifies the linker to be used]'
        '-version[Print version information and exit]'
        '-v[Show commands to run and use verbose output]'
        '-warnings-as-errors[Treat warnings as errors]'
        '-Xcc[Pass <arg> to the C/C++/Objective-C compiler]: : '
        '-Xlinker[Specifies an option which should be passed to the linker]: : '
        '*:inputs:_files'
    )
    _arguments $build_options
}

_swift
