#!/usr/bin/env python

"""
 This source file is part of the Swift.org open source project

 Copyright (c) 2014 - 2019 Apple Inc. and the Swift project authors
 Licensed under Apache License v2.0 with Runtime Library Exception

 See http://swift.org/LICENSE.txt for license information
 See http://swift.org/CONTRIBUTORS.txt for Swift project authors

 -------------------------------------------------------------------------
"""

from __future__ import print_function

try:
    from cStringIO import StringIO
except ImportError:
    from io import StringIO
import argparse
import codecs
import copy
import distutils.dir_util
import distutils.file_util
import errno
import json
import multiprocessing
import os
import pipes
import platform
import re
import shlex
import shutil
import stat
import subprocess
import sys
import tempfile

def note(message):
    print("--- %s: note: %s" % (os.path.basename(sys.argv[0]), message))
    sys.stdout.flush()

def error(message):
    print("--- %s: error: %s" % (os.path.basename(sys.argv[0]), message))
    sys.stdout.flush()
    raise SystemExit(1)

def symlink_force(target, link_name):
    if os.path.isdir(link_name):
        link_name = os.path.join(link_name, os.path.basename(target))
    try:
        os.symlink(target, link_name)
    except OSError as e:
        if e.errno == errno.EEXIST:
            os.remove(link_name)
            os.symlink(target, link_name)
        else:
            raise e

def mkdir_p(path):
    """
    mkdir_p(path)

    Create the given directory, if it does not exist.
    """

    try:
        os.makedirs(path)
    except OSError as e:
        # Ignore EEXIST, which may occur during a race condition.
        if e.errno != errno.EEXIST:
            raise

def get_current_sha(project_root):
    try:
        return subprocess.check_output(
            ["git", "-C", project_root, "rev-parse", "--short", "HEAD"], universal_newlines=True).strip()
    except:
        return None

g_project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
g_source_root = os.path.join(g_project_root, "Sources")

if platform.system() == 'Darwin':
    g_default_sysroot = subprocess.check_output(
        ["xcrun", "--sdk", "macosx", "--show-sdk-path"],
        universal_newlines=True).strip()

# Create a quoted C string literal from an arbitrary string.
def make_c_string_literal(str):
    return str.replace("\\", "\\\\").replace("\"", "\\\"")

def create_versoning_args(args):
    build_flags = []
    if args.vendor_name:
        vendor_name = make_c_string_literal(args.vendor_name)
        build_flags.extend(["-Xswiftc", "-Xcc", "-Xswiftc", "-DSPM_VENDOR_NAME=%s" % (vendor_name)])

    # Try to use current SHA if build_identifier is not provided.
    build_identifier = args.build_identifier
    if not build_identifier:
        build_identifier = get_current_sha(g_project_root)
    
    if build_identifier:
        build_identifier = make_c_string_literal(build_identifier)
        build_flags.extend(["-Xswiftc", "-Xcc", "-Xswiftc", "-DSPM_BUILD_IDENT=%s" % (build_identifier)])
    return build_flags

def get_swiftc_path():
    try:
        if os.getenv("SWIFT_EXEC"):
            swiftc_path=os.path.realpath(os.getenv("SWIFT_EXEC"))
            if os.path.basename(swiftc_path) == 'swift':
                swiftc_path = swiftc_path + 'c'
            return swiftc_path
        elif platform.system() == 'Darwin':
            return subprocess.check_output(["xcrun", "--find", "swiftc"],
                stderr=subprocess.PIPE, universal_newlines=True).strip()
        else:
            return subprocess.check_output(["which", "swiftc"],
            universal_newlines=True).strip()
    except:
        error("unable to find 'swiftc' tool for bootstrap build")

def build_llbuild(args):
    note("Building llbuild")

    if not args.llbuild_build_dir:
        args.llbuild_build_dir = os.path.join(args.target_path, "llbuild")

    args.llbuild_source_dir = get_llbuild_source_path()

    api_dir = os.path.join(args.llbuild_build_dir, ".cmake/api/v1/query")
    mkdir_p(api_dir)
    subprocess.check_call(["touch", "codemodel-v2"], cwd=api_dir)

    # Run CMake if needed.
    cmake_cache_path = os.path.join(args.llbuild_build_dir, "CMakeCache.txt")
    if not os.path.isfile(cmake_cache_path):
        mkdir_p(args.llbuild_build_dir)
        cmd = [
            "cmake", "-G", "Ninja",
            "-DCMAKE_BUILD_TYPE:=Debug",
            "-DCMAKE_C_COMPILER:=clang",
            "-DCMAKE_CXX_COMPILER:=clang++",
            "-DLLBUILD_SUPPORT_BINDINGS:=Swift",
            args.llbuild_source_dir
        ]
        subprocess.check_call(cmd, cwd=args.llbuild_build_dir)

    # Build.
    subprocess.check_call(["ninja"], cwd=args.llbuild_build_dir)

def get_llbuild_source_path():
    llbuild_path = os.path.join(g_project_root, "..", "llbuild")
    if os.path.exists(llbuild_path):
        return llbuild_path
    note("clone llbuild next to swiftpm directory; see development docs: https://github.com/apple/swift-package-manager/blob/master/Documentation/Development.md#using-trunk-snapshot")
    error("unable to find llbuild source directory at %s" % llbuild_path)

def build_runtimes_only(args):
    build_path = os.path.join(args.target_path, "runtimes_only")

    # Run CMake if needed.
    cmake_cache_path = os.path.join(build_path, "CMakeCache.txt")
    if not os.path.isfile(cmake_cache_path):
        mkdir_p(build_path)

        cmake_swift_flags = ""
        if platform.system() == 'Darwin':
            cmake_swift_flags = "-sdk " + g_default_sysroot

        cmd = [
            "cmake", "-G", "Ninja",
            "-DCMAKE_BUILD_TYPE:=Debug",
            "-DCMAKE_Swift_FLAGS=" + cmake_swift_flags,
            os.path.join(g_project_root, "Utilities/BuildRuntimesOnly")
        ]
        subprocess.check_call(cmd, cwd=build_path)

    # Build.
    subprocess.check_call(["ninja"], cwd=build_path)

    # Make symlink so runtimes can be found automatically when running the inferior.
    runtimes_dir = os.path.join(args.target_path, "lib/swift/pm")
    mkdir_p(os.path.dirname(runtimes_dir))
    symlink_force(os.path.join(build_path, "pm"), runtimes_dir)

    mkdir_p(os.path.join(args.target_path, "debug"))
    symlink_force(args.swiftc_path, os.path.join(args.target_path, "debug/swiftc"))

def bootstrap(args):
    args.bootstrap_path = os.path.join(args.target_path, "bootstrap")
    bootstrap_path = args.bootstrap_path

    # Run CMake if needed.
    cmake_cache_path = os.path.join(bootstrap_path, "CMakeCache.txt")
    if not os.path.isfile(cmake_cache_path):
        mkdir_p(bootstrap_path)

        cmake_swift_flags = ""
        if platform.system() == 'Darwin':
            cmake_swift_flags = "-sdk " + g_default_sysroot

        if args.llbuild_link_framework:
            llbuild_arg = "-DLLBUILD_FRAMEWORK=%s" % args.llbuild_build_dir
        else:
            llbuild_dir = os.path.join(args.llbuild_build_dir, "cmake/modules")
            llbuild_arg = "-DLLBuild_DIR=" + llbuild_dir
        cmd = [
            "cmake", "-G", "Ninja",
            "-DCMAKE_BUILD_TYPE:=Debug",
            "-DCMAKE_C_COMPILER:=clang",
            llbuild_arg,
            "-DCMAKE_Swift_FLAGS=" + cmake_swift_flags,
            "-DUSE_VENDORED_TSC=ON",
            g_project_root
        ]
        subprocess.check_call(cmd, cwd=bootstrap_path)

    # Build.
    subprocess.check_call(["ninja"], cwd=bootstrap_path)

def build_swiftpm(args):
    # Make symlink so runtimes can be found automatically when running the inferior.
    runtimes_dir = os.path.join(args.target_path, "lib/swift/pm")
    mkdir_p(os.path.dirname(runtimes_dir))
    symlink_force(os.path.join(args.bootstrap_path, "pm"), runtimes_dir)

    env_cmd = ["env", "SWIFT_EXEC=" + args.swiftc_path,
        "SWIFTPM_BUILD_DIR=" + args.build_path,
        "SWIFTPM_PD_LIBS=" + os.path.join(args.bootstrap_path, "pm"),
    ]
    if args.llbuild_link_framework:
        env_cmd.append("DYLD_FRAMEWORK_PATH=%s" % args.llbuild_build_dir)
        # FIXME: We always need to pass this.
        env_cmd.append("SWIFTPM_BOOTSTRAP=1")
    else:
        env_cmd.append("SWIFTCI_USE_LOCAL_DEPS=1")

    libs = [
        os.path.join(args.bootstrap_path, "lib"),
        os.path.join(args.llbuild_build_dir, "lib"),
    ]
    env_cmd.append("DYLD_LIBRARY_PATH=%s" % (":".join(libs)))

    build_flags = []
    build_flags.append(os.path.join(args.bootstrap_path, "bin/swift-build"))

    # No need for indexing-while-building.
    build_flags.append("--disable-index-store")

    if args.release:
        build_flags.extend(["-Xswiftc", "-enable-testing"])
        build_flags.extend(["--configuration", "release"])

    # Add the framework search path if we're linking with llbuild framework.
    if args.llbuild_link_framework:
        build_flags.extend(["-Xswiftc", "-F%s" % args.llbuild_build_dir])
        build_flags.extend(["-Xlinker", "-F%s" % args.llbuild_build_dir])

    cmd = env_cmd + build_flags

    note("building self-hosted 'swift-build': %s" % (
        ' '.join(cmd),))
    result = subprocess.call(cmd, cwd=g_project_root)
    if result != 0:
        error("build failed with exit status %d" % (result,))

def main():
    parser = argparse.ArgumentParser(
        usage="%(prog)s [options] [clean|all|test|install|build-runtimes]",
        description="This script will build a bootstrapped copy of the Swift "
                    "Package Manager, and optionally perform extra actions "
                    "like installing the result (with 'install') to a "
                    "location ('--prefix').")
    parser.add_argument("build_actions",
                        help="Extra actions to perform. Can be any number of "
                             "the following: [clean, all, test, install]",
                        nargs="*", default=["all"])
    parser.add_argument("--build", dest="build_path",
                        help="create build products at PATH [%(default)s]",
                        default=".build", metavar="PATH")
    parser.add_argument("--llbuild-link-framework", dest="llbuild_link_framework",
                        action="store_true", help="link llbuild framework")
    parser.add_argument("--llbuild-build-dir", dest="llbuild_build_dir",
                        help="Path to llbuild build directory")
    parser.add_argument("--release", action="store_true",
                        help="Build stage 2 for release")
    args = parser.parse_args()

    build_actions = set(args.build_actions)

    # Absolutize input paths.
    args.build_path = os.path.abspath(args.build_path)
    args.swiftc_path = get_swiftc_path()

    build_target = "x86_64-apple-macosx"
    args.target_path = os.path.join(args.build_path, build_target)

    if "build-pd" in build_actions:
        build_runtimes_only(args)
        return

    # Build llbuild if its build path is not passed in.
    if not args.llbuild_build_dir:
        if args.llbuild_link_framework:
            xcode = subprocess.check_output(
                ["xcode-select", "-p"], universal_newlines=True).strip()
            args.llbuild_build_dir = os.path.join(xcode, "../SharedFrameworks")
        else:
            build_llbuild(args)

    # Bootstrap swiftpm.
    bootstrap(args)

    # Build SwiftPM with the bootstrapped version.
    build_swiftpm(args)

if __name__ == '__main__':
    main()
