#!/bin/bash
##===----------------------------------------------------------------------===##
##
## This source file is part of the Swift open source project
##
## Copyright (c) 2014-2022 Apple Inc. and the Swift project authors
## Licensed under Apache License v2.0 with Runtime Library Exception
##
## See http://swift.org/LICENSE.txt for license information
## See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
##
##===----------------------------------------------------------------------===##

set -eu

__dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

SRCROOT="`cd "${__dir}/..";pwd`"
echo "SRCROOT is $SRCROOT"

BUILD_DIR=$SRCROOT/build
echo "BUILD_DIR is $BUILD_DIR"

mkdir -p $BUILD_DIR
cd $BUILD_DIR

CMAKE_Swift_FLAGS=""
if (uname | grep -qi darwin); then
    CMAKE_Swift_FLAGS="-sdk $(xcrun --sdk macosx --show-sdk-path)"
fi

echo "Building yams"
mkdir -p yams
cd yams

Yams_SRCROOT="`cd "${SRCROOT}/../yams";pwd`"

set -x
cmake \
    -G Ninja \
    -DCMAKE_BUILD_TYPE=Debug \
    -DCMAKE_Swift_FLAGS="$CMAKE_Swift_FLAGS" \
    $Yams_SRCROOT
ninja
cd ..
set +x

echo "Building swift system"
mkdir -p swiftsystem
cd swiftsystem

SwiftSystem_SRCROOT="`cd "${SRCROOT}/../swift-system";pwd`"

set -x
cmake \
    -G Ninja \
    -DCMAKE_BUILD_TYPE=Debug \
    -DCMAKE_Swift_FLAGS="$CMAKE_Swift_FLAGS" \
    $SwiftSystem_SRCROOT
ninja
cd ..
set +x

echo "Building swift collections"
mkdir -p swiftcollections
cd swiftcollections

SwiftCollections_SRCROOT="`cd "${SRCROOT}/../swift-collections";pwd`"

set -x
cmake \
    -G Ninja \
    -DCMAKE_BUILD_TYPE=Debug \
    -DCMAKE_Swift_FLAGS="$CMAKE_Swift_FLAGS" \
    $SwiftCollections_SRCROOT
ninja
cd ..
set +x

echo "Building swift crypto"
mkdir -p crypto
cd crypto

SwiftCrypto_SRCROOT="`cd "${SRCROOT}/../swift-crypto";pwd`"

set -x
cmake \
    -G Ninja \
    -DCMAKE_BUILD_TYPE=Debug \
    -DCMAKE_Swift_FLAGS="$CMAKE_Swift_FLAGS" \
    $SwiftCrypto_SRCROOT
ninja
cd ..
set +x

echo "Building argument parser"
mkdir -p argumentparser
cd argumentparser

ArgumentParser_SRCROOT="`cd "${SRCROOT}/../swift-argument-parser";pwd`"

set -x
cmake \
    -G Ninja \
    -DCMAKE_BUILD_TYPE=Debug \
    -DCMAKE_Swift_FLAGS="$CMAKE_Swift_FLAGS" \
    $ArgumentParser_SRCROOT
ninja libArgumentParser.dylib
cd ..
set +x

echo "Building tools support core"
mkdir -p tsc
cd tsc

TSC_SRCROOT="`cd "${SRCROOT}/../swift-tools-support-core";pwd`"

set -x
cmake \
    -G Ninja \
    -DCMAKE_BUILD_TYPE=Debug \
    -DCMAKE_Swift_FLAGS="$CMAKE_Swift_FLAGS" \
    -DSwiftSystem_DIR=$BUILD_DIR/swiftsystem/cmake/modules \
    $TSC_SRCROOT
ninja
cd ..
set +x

echo "Building llbuild"

LLBuild_SRCROOT="`cd "${SRCROOT}/../llbuild";pwd`"
mkdir -p llbuild
cd llbuild

set -x
cmake \
    -G Ninja \
    -DCMAKE_BUILD_TYPE=Debug \
    -DLLBUILD_SUPPORT_BINDINGS=Swift \
    -DCMAKE_Swift_FLAGS="$CMAKE_Swift_FLAGS" \
    $LLBuild_SRCROOT
ninja
cd ..
set +x

echo "Building swift driver"
mkdir -p driver
cd driver

SwiftDriver_SRCROOT="`cd "${SRCROOT}/../swift-driver";pwd`"

set -x
cmake \
    -G Ninja \
    -DCMAKE_BUILD_TYPE=Debug \
    -DCMAKE_Swift_FLAGS="$CMAKE_Swift_FLAGS" \
    -DTSC_DIR=$BUILD_DIR/tsc/cmake/modules \
    -DLLBuild_DIR=$BUILD_DIR/llbuild/cmake/modules \
    -DYams_DIR=$BUILD_DIR/yams/cmake/modules \
    -DArgumentParser_DIR=$BUILD_DIR/argumentparser/cmake/modules \
    -DSwiftSystem_DIR=$BUILD_DIR/swiftsystem/cmake/modules \
    $SwiftDriver_SRCROOT
ninja
cd ..
set +x

echo "Building swiftpm"

mkdir -p swiftpm
cd swiftpm

set -x
cmake \
    -G Ninja \
    -DCMAKE_BUILD_TYPE=Debug \
    -DTSC_DIR=$BUILD_DIR/tsc/cmake/modules \
    -DLLBuild_DIR=$BUILD_DIR/llbuild/cmake/modules \
    -DSwiftSystem_DIR=$BUILD_DIR/swiftsystem/cmake/modules \
    -DArgumentParser_DIR=$BUILD_DIR/argumentparser/cmake/modules \
    -DSwiftCrypto_DIR=$BUILD_DIR/crypto/cmake/modules \
    -DSwiftDriver_DIR=$BUILD_DIR/driver/cmake/modules \
    -DSwiftCollections_DIR=$BUILD_DIR/swiftcollections/cmake/modules \
    -DCMAKE_Swift_FLAGS="$CMAKE_Swift_FLAGS" \
    -DUSE_VENDORED_TSC=OFF \
    $SRCROOT
ninja
cd ..
