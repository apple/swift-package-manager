/*
This source file is part of the Swift.org open source project

Copyright 2015 - 2016 Apple Inc. and the Swift project authors
Licensed under Apache License v2.0 with Runtime Library Exception

See http://swift.org/LICENSE.txt for license information
See http://swift.org/CONTRIBUTORS.txt for Swift project authors
*/

import Basics
import Foundation
import ScriptParse
import TSCBasic

fileprivate extension AbsolutePath {
    var sha256Hash: String {
        String(ByteString(stringLiteral: pathString)
                .sha256Checksum.prefix(6))
    }
}

/// An enumeration of the errors that can be generated by the run tool.
public enum ScriptError: Swift.Error {
    /// The specified file doesn't exist.
    case fileNotFound(String)
}

extension ScriptError: CustomStringConvertible {
    public var description: String {
        switch self {
        case .fileNotFound(let path):
            return "\(path) doesn't exist"
        }
    }
}

/// Resolves a path string to `AbsolutePath`.
public func resolveFilePath(_ path: String) -> AbsolutePath? {
    let absolutePath: AbsolutePath
    if path.first == "/" {
        absolutePath = AbsolutePath(path)
    } else {
        guard let cwd = localFileSystem.currentWorkingDirectory else {
            return nil
        }
        absolutePath = AbsolutePath(cwd, path)
    }
    guard localFileSystem.isFile(absolutePath) else {
        return nil
    }
    return absolutePath
}

public func prepareCache(for file: String, at dirPath: AbsolutePath) throws -> (productName: String, cacheDirPath: AbsolutePath) {
    if let scriptPath = resolveFilePath(file) {
        let json = try ScriptParse.manifest(for: scriptPath)
        let decoder = JSONDecoder()
        let manifest = try decoder.decode(ScriptDependencies.self, from: json)
        
        let productName = scriptPath.basename.spm_dropSuffix(".swift").spm_mangledToBundleIdentifier()
        let cacheDirPath = dirPath.appending(component: "\(productName)-\(scriptPath.sha256Hash)")
        try localFileSystem.createDirectory(cacheDirPath, recursive: true)
        
        let sourceDirPath = cacheDirPath.appending(components: "Sources", productName)
        try localFileSystem.createDirectory(sourceDirPath, recursive: true)
        if !localFileSystem.exists(sourceDirPath.appending(component: "main.swift")) {
            try localFileSystem.createSymbolicLink(sourceDirPath.appending(component: "main.swift"), pointingAt: scriptPath, relative: false)
        }
        
        var targets: [(name: String, package: String)] = []
        for package in manifest.modules {
            let packageName = package.package.name
            for target in package.modules {
                targets.append((target, packageName))
            }
        }
        
        let packageSwift = """
            // swift-tools-version:5.4
            import PackageDescription
            let package = Package(
                name: "\(productName)",
                products: [
                    .executable(
                        name: "\(productName)",
                        targets: ["\(productName)"]),
                ],
                dependencies: [\(manifest.modules.map{".package(\($0.package.raw))"}
                        .joined(separator: ", "))],
                targets: [
                    .executableTarget(
                        name: "\(productName)",
                        dependencies: [\(targets.map {".product\($0)"}.joined(separator: ", "))],
                        swiftSettings: [.unsafeFlags(["-Xfrontend", "-ignore-package-declarations"])]
                )]
            )
            
            """
        
        try localFileSystem.writeIfChanged(
            path: cacheDirPath.appending(component: "Package.swift"),
            bytes: ByteString(stringLiteral: packageSwift)
        )
        return (productName, cacheDirPath)
    } else {
        let cacheDirPath = dirPath.appending(component: file)
        guard localFileSystem.isDirectory(cacheDirPath) else {
            throw ScriptError.fileNotFound(file)
        }
        return (String(file.dropLast(7)), cacheDirPath)
    }
}
